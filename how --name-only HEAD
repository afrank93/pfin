[1mdiff --git a/app/__init__.py b/app/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..b368e89[m
[1m--- /dev/null[m
[1m+++ b/app/__init__.py[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m# Package marker for app[m
[1mdiff --git a/app/db.py b/app/db.py[m
[1mnew file mode 100644[m
[1mindex 0000000..7334a29[m
[1m--- /dev/null[m
[1m+++ b/app/db.py[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mfrom __future__ import annotations[m
[32m+[m
[32m+[m[32mfrom collections.abc import Generator[m
[32m+[m[32mfrom contextlib import contextmanager[m
[32m+[m
[32m+[m[32mfrom sqlmodel import Session, SQLModel, create_engine[m
[32m+[m
[32m+[m[32mfrom .config import get_settings[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_engine():[m
[32m+[m[32m    settings = get_settings()[m
[32m+[m[32m    # Ensure parent directory exists (no-op if present)[m
[32m+[m[32m    settings.data_dir.mkdir(parents=True, exist_ok=True)[m
[32m+[m[32m    engine = create_engine(f"sqlite:///{settings.db_path}", echo=False)[m
[32m+[m[32m    return engine[m
[32m+[m
[32m+[m
[32m+[m[32m@contextmanager[m
[32m+[m[32mdef session_scope() -> Generator[Session, None, None]:[m
[32m+[m[32m    engine = get_engine()[m
[32m+[m[32m    with Session(engine) as session:[m
[32m+[m[32m        yield session[m
[32m+[m
[32m+[m
[32m+[m[32mdef get_session() -> Generator[Session, None, None]:[m
[32m+[m[32m    engine = get_engine()[m
[32m+[m[32m    with Session(engine) as session:[m
[32m+[m[32m        yield session[m
[32m+[m
[32m+[m
[32m+[m[32mdef create_all() -> None:[m
[32m+[m[32m    engine = get_engine()[m
[32m+[m[32m    SQLModel.metadata.create_all(engine)[m
